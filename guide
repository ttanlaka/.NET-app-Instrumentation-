Install OpenTelemetry Auto-Instrumentation for .NET
Download the latest OpenTelemetry .NET Auto-Instrumentation package:https://github.com/open-telemetry/opentelemetry-dotnet-instrumentation
Extract the files and set them up on your VM or container.
Set Required Environment Variables

Add these variables to your VMâ€™s environment settings or Dockerfile:

# Enable .NET Auto-Instrumentation
OTEL_DOTNET_AUTO_HOME=C:\otel-auto-instrumentation
DOTNET_STARTUP_HOOKS=%OTEL_DOTNET_AUTO_HOME%\net\StartupHook.dll
DOTNET_SHARED_STORE=%OTEL_DOTNET_AUTO_HOME%\store
DOTNET_ADDITIONAL_DEPS=%OTEL_DOTNET_AUTO_HOME%\additionalDeps
CORECLR_PROFILER={918728DD-259F-4A6A-AC2B-B85E1B658318}
CORECLR_ENABLE_PROFILING=1
CORECLR_PROFILER_PATH=%OTEL_DOTNET_AUTO_HOME%\win-x64\OpenTelemetry.AutoInstrumentation.Native.dll

# Set OTLP Exporter for Splunk O11y
OTEL_EXPORTER_OTLP_ENDPOINT=https://ingest.<region>.signalfx.com/v2/datapoint
OTEL_EXPORTER_OTLP_HEADERS="X-SF-Token=<YOUR_SPLUNK_ACCESS_TOKEN>"

# Enable Tracing & Logs
OTEL_DOTNET_AUTO_TRACES_ENABLED=true
OTEL_DOTNET_AUTO_METRICS_ENABLED=true
OTEL_DOTNET_AUTO_LOGS_ENABLED=true

# Enable Instrumentation for Specific Components
OTEL_DOTNET_AUTO_HTTPCLIENT_INSTRUMENTATION_ENABLED=true
OTEL_DOTNET_AUTO_SQLCLIENT_INSTRUMENTATION_ENABLED=true
OTEL_DOTNET_AUTO_ASPNETCORE_INSTRUMENTATION_ENABLED=true
OTEL_DOTNET_AUTO_GRPC_INSTRUMENTATION_ENABLED=true

# Sampling Configuration
OTEL_TRACES_SAMPLER=parentbased_always_on

 Replace <YOUR_SPLUNK_ACCESS_TOKEN> with your actual Splunk Observability Cloud token.
 Replace <region> with your Splunk region (e.g., us0, eu0).


Configure OpenTelemetry Collector (otel-collector-config.yaml)

Create a configuration file (otel-collector-config.yaml) for the OpenTelemetry Collector:

receivers:
  otlp:
    protocols:
      grpc:
      http:

processors:
  batch:

exporters:
  otlphttp:
    endpoint: "https://ingest.<region>.signalfx.com/v2/datapoint"
    headers:
      X-SF-Token: "<YOUR_SPLUNK_ACCESS_TOKEN>"

  logging:
    verbosity: detailed

service:
  pipelines:
    traces:
      receivers: [otlp]
      processors: [batch]
      exporters: [otlphttp, logging]
    metrics:
      receivers: [otlp]
      processors: [batch]
      exporters: [otlphttp, logging]
    logs:
      receivers: [otlp]
      processors: [batch]
      exporters: [otlphttp, logging]

Save this file on the VM and ensure the Otel Collector service points to it.

Start the OpenTelemetry Collector with the config file:
otelcol --config=otel-collector-config.yaml




(Optional) Running Auto-Instrumented .NET App in Docker

If you are running the .NET app in a container, modify the Dockerfile to include the OpenTelemetry Auto-Instrumentation setup:

FROM mcr.microsoft.com/dotnet/aspnet:7.0
WORKDIR /app
COPY . .
ENV OTEL_DOTNET_AUTO_HOME=/otel-auto-instrumentation
ENV DOTNET_STARTUP_HOOKS=$OTEL_DOTNET_AUTO_HOME/net/StartupHook.dll
ENV DOTNET_SHARED_STORE=$OTEL_DOTNET_AUTO_HOME/store
ENV DOTNET_ADDITIONAL_DEPS=$OTEL_DOTNET_AUTO_HOME/additionalDeps
ENV CORECLR_PROFILER={918728DD-259F-4A6A-AC2B-B85E1B658318}
ENV CORECLR_ENABLE_PROFILING=1
ENV CORECLR_PROFILER_PATH=$OTEL_DOTNET_AUTO_HOME/linux-x64/OpenTelemetry.AutoInstrumentation.Native.so
ENV OTEL_EXPORTER_OTLP_ENDPOINT=https://ingest.<region>.signalfx.com/v2/datapoint
ENV OTEL_EXPORTER_OTLP_HEADERS="X-SF-Token=<YOUR_SPLUNK_ACCESS_TOKEN>"
CMD ["dotnet", "YourApp.dll"]


After setup, check the logs to ensure OpenTelemetry is collecting traces and sending data to Splunk Observability Cloud.

Verify Connectivity to Splunk:


