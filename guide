1.Configure the .NET App to Expose Metrics

Goal: Ensure the .NET application is instrumented to expose metrics over an endpoint.
Step 1: Install Required OpenTelemetry Packages
Run the following commands in your .NET application directory:

dotnet add package OpenTelemetry.Exporter.PrometheusAspNetCore
dotnet add package OpenTelemetry.Extensions.Hosting
dotnet add package OpenTelemetry.Instrumentation.AspNetCore
dotnet add package OpenTelemetry.Instrumentation.Http
dotnet add package OpenTelemetry.Instrumentation.SqlClient


Step 2: Modify Program.cs to Enable Metrics Exposure
Add the following code to Program.cs (for .NET 6+):

using OpenTelemetry.Metrics;
using OpenTelemetry.Resources;
using OpenTelemetry.Trace;

var builder = WebApplication.CreateBuilder(args);

// Define OpenTelemetry resources
builder.Services.AddOpenTelemetry()
    .WithMetrics(metrics =>
    {
        metrics.SetResourceBuilder(ResourceBuilder.CreateDefault().AddService("MyDotNetApp"))
               .AddAspNetCoreInstrumentation()
               .AddHttpClientInstrumentation()
               .AddSqlClientInstrumentation()
               .AddRuntimeInstrumentation()
               .AddProcessInstrumentation()
               .AddPrometheusExporter(); // Enables Prometheus endpoint
    });

var app = builder.Build();

// Map Prometheus metrics to an endpoint
app.UseOpenTelemetryPrometheusScrapingEndpoint();

app.MapGet("/", () => "Hello World!");
app.Run();

Step 3: Verify Metrics Endpoint
Run the .NET app:
dotnet run
Open a browser or use curl to check if metrics are being exposed:
curl http://localhost:9464/metrics
(Port 9464 is the default for Prometheus metrics in OpenTelemetry.)
If you see a list of metrics, your app is correctly exposing metrics! 


2.Configure the OpenTelemetry Collector to Collect Metrics

Goal: Set up the Otel Collector to scrape metrics from the .NET app and forward them to Splunk.

Step 1: Install & Run the OpenTelemetry Collector
If using Docker, run:

docker run --name otel-collector -p 4317:4317 -p 4318:4318 -p 9464:9464 \
  -v $(pwd)/otel-collector-config.yaml:/etc/otelcol-config.yaml \
  --rm otel/opentelemetry-collector:latest --config /etc/otelcol-config.yaml
(Ensure you have a valid otel-collector-config.yaml file.)

Step 2: Create otel-collector-config.yaml
Create an otel-collector-config.yaml file to scrape the .NET app’s metrics and export them to Splunk:

receivers:
  prometheus:
    config:
      scrape_configs:
        - job_name: "dotnet_app"
          scrape_interval: 5s
          static_configs:
            - targets: ["host.docker.internal:9464"]  # Change to "localhost:9464" if running locally

exporters:
  otlphttp:
    endpoint: "https://ingest.us0.signalfx.com/v2/datapoint"
    headers:
      X-SF-Token: "<YOUR_SPLUNK_ACCESS_TOKEN>"

service:
  pipelines:
    metrics:
      receivers: [prometheus]
      exporters: [otlphttp]
(Replace <YOUR_SPLUNK_ACCESS_TOKEN> with your actual Splunk Observability Cloud token.)

Step 3: Start the OpenTelemetry Collector
If using Docker, restart the collector:
docker restart otel-collector
If running manually, start it with:
otelcol --config=otel-collector-config.yaml

At this point, the OpenTelemetry Collector should be scraping metrics from the .NET app and preparing to send them to Splunk! 

3.Send Metrics to Splunk Observability Cloud

Goal: Ensure that metrics from the Otel Collector are being ingested into Splunk.
Step 1: Verify the OpenTelemetry Collector Logs
Run:

docker logs otel-collector | grep "error"
If there are no errors, the Otel Collector is running fine.

Step 2: Check Metrics in Splunk Observability Cloud
Log in to Splunk Observability Cloud.
Navigate to Metrics → Metric Finder.
Search for your app’s metrics, e.g.:
metric_name: dotnet_app_http_requests_total
If metrics appear, the setup is working correctly! 

Step 3: Set Up a Dashboard in Splunk
Go to Dashboards → Create Dashboard.
Click Add Chart → Select Time Series.
Query your metric:
metric_name: dotnet_app_http_requests_total
Click Save to create the chart.

